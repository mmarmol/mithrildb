{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/config": {
            "get": {
                "description": "Returns the current server configuration used by the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get server configuration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/config.AppConfig"
                        }
                    }
                }
            }
        },
        "/config/update": {
            "put": {
                "description": "Updates system configuration parameters. Some changes are applied live, while others require a restart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Update configuration",
                "parameters": [
                    {
                        "description": "Configuration parameters to update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/config.UpdateResult"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents": {
            "get": {
                "description": "Retrieves a document by key, including its value and metadata.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Retrieve a document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Optional RocksDB fill cache read option",
                        "name": "fill_cache",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional RocksDB read tier (e.g. 'all', 'cache-only')",
                        "name": "read_tier",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Document"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid key",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Stores a document in the specified column family. Supports optimistic concurrency via CAS.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Store or update a document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Expiration time in seconds (TTL \u003c= 30d or Unix timestamp)",
                        "name": "expiration",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Document type (e.g. 'json', 'counter', 'list')",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "CAS (revision) for concurrency control",
                        "name": "cas",
                        "in": "query"
                    },
                    {
                        "description": "Document value (JSON-encoded)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Document"
                        }
                    },
                    "400": {
                        "description": "Invalid input or missing value",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Column family not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "CAS mismatch",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a document by key within a specified column family.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Delete a document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document key to delete",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document successfully deleted"
                    },
                    "400": {
                        "description": "Missing or invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Document or column family not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/bulk/get": {
            "post": {
                "description": "Retrieves multiple documents with metadata by key. Missing keys will be returned with null values.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Bulk document fetch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "description": "List of keys to retrieve",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.multiGetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.MultiGetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or missing key list",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/bulk/put": {
            "post": {
                "description": "Stores multiple documents in a single call. Each document is defined by a key and a value/type pair.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Bulk insert documents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Column family (defaults to 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Expiration time in seconds (TTL \u003c= 30d or Unix timestamp)",
                        "name": "expiration",
                        "in": "query"
                    },
                    {
                        "description": "Map of key to value/type entry",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/handlers.BulkPutRequestEntry"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/model.Document"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or empty payload",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/counters/delta": {
            "post": {
                "description": "Increments or decrements a counter document by a given integer value.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "counters"
                ],
                "summary": "Modify counter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Expiration time in seconds (TTL \u003c= 30d or Unix timestamp)",
                        "name": "expiration",
                        "in": "query"
                    },
                    {
                        "description": "Delta value for increment or decrement",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.incrementRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.incrementResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or JSON body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/insert": {
            "post": {
                "description": "Insert a new document only if the key does not already exist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Insert a document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (defaults to 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Document type (json, counter, list, set)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Expiration time in seconds (TTL \u003c= 30d or Unix timestamp)",
                        "name": "expiration",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: sync",
                        "name": "sync",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: disable WAL",
                        "name": "disable_wal",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: no slowdown",
                        "name": "no_slowdown",
                        "in": "query"
                    },
                    {
                        "description": "Document value body. Must contain 'value' field",
                        "name": "document",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Document"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/keys": {
            "get": {
                "description": "Returns a list of keys within the specified column family, optionally filtered by prefix and pagination options.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "keys"
                ],
                "summary": "List document keys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Only return keys with this prefix",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Return keys after this key (for pagination)",
                        "name": "start_after",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of keys to return (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to fill RocksDB read cache",
                        "name": "fill_cache",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "RocksDB read tier (e.g. 'all', 'cache-only')",
                        "name": "read_tier",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/list": {
            "get": {
                "description": "Returns a map of documents filtered by optional prefix and paginated using start_after and limit.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "List documents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter documents whose keys begin with this prefix",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Skip documents until this key (exclusive)",
                        "name": "start_after",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of documents to return (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to fill RocksDB read cache",
                        "name": "fill_cache",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "RocksDB read tier (e.g., 'all', 'cache-only')",
                        "name": "read_tier",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/model.Document"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/lists/pop": {
            "post": {
                "description": "Removes and returns the last element of a list-type document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Pop element from list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key of the list document",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Expiration time in seconds (TTL \u003c= 30d or Unix timestamp)",
                        "name": "expiration",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: sync write to disk",
                        "name": "sync",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: disable write-ahead log",
                        "name": "disable_wal",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: disable slowdown on write buffer full",
                        "name": "no_slowdown",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the popped element",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request or missing key",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/lists/push": {
            "post": {
                "description": "Adds an element to the end of an existing list-type document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Push element to list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key of the list document",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Expiration time in seconds (TTL \u003c= 30d or Unix timestamp)",
                        "name": "expiration",
                        "in": "query"
                    },
                    {
                        "description": "Element to add",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.listElementRequest"
                        }
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: sync write to disk",
                        "name": "sync",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: disable write-ahead log",
                        "name": "disable_wal",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: disable slowdown on write buffer full",
                        "name": "no_slowdown",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or JSON body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/lists/range": {
            "get": {
                "description": "Returns a slice of elements from a list document, based on start and end indices.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Get elements from a list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key of the list document",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start index (inclusive, 0-based)",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "End index (inclusive, -1 for end of list)",
                        "name": "end",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Read option: whether to fill RocksDB cache",
                        "name": "fill_cache",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Read option: 'all' or 'cache-only'",
                        "name": "read_tier",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List content",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/lists/shift": {
            "post": {
                "description": "Removes and returns the first element of a list. Returns an error if the list is empty.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Shift list (remove first element)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key of the list document",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Expiration time in seconds (TTL \u003c= 30d or Unix timestamp)",
                        "name": "expiration",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: wait for sync",
                        "name": "sync",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: disable WAL",
                        "name": "disable_wal",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: disable slowdown retries",
                        "name": "no_slowdown",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Removed element from the list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Document not found or list is empty",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/lists/unshift": {
            "post": {
                "description": "Adds a new element to the beginning of a list document. The element can be of any JSON-compatible type.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lists"
                ],
                "summary": "Unshift list (add to start)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key of the list document",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Expiration time in seconds (TTL \u003c= 30d or Unix timestamp)",
                        "name": "expiration",
                        "in": "query"
                    },
                    {
                        "description": "Element to insert at the beginning",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.listElementRequest"
                        }
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: wait for sync",
                        "name": "sync",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: disable WAL",
                        "name": "disable_wal",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Write option: disable slowdown retries",
                        "name": "no_slowdown",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Insertion successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input or JSON body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/replace": {
            "post": {
                "description": "Replaces a document if it already exists. Fails if the key does not exist. Supports CAS for concurrency control.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Replace an existing document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Expiration time in seconds (TTL \u003c= 30d or Unix timestamp)",
                        "name": "expiration",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Document type (e.g. 'json', 'counter', 'list')",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "CAS (revision) for concurrency control",
                        "name": "cas",
                        "in": "query"
                    },
                    {
                        "description": "New value for the document",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Document"
                        }
                    },
                    "400": {
                        "description": "Invalid request or missing value",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Key not found or column family missing",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "CAS mismatch",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/sets/add": {
            "post": {
                "description": "Adds a new element to a document of type \"set\". If the element already exists, it will not be duplicated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sets"
                ],
                "summary": "Add element to set",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Expiration time in seconds (TTL \u003c= 30d or Unix timestamp)",
                        "name": "expiration",
                        "in": "query"
                    },
                    {
                        "description": "Element to add to the set",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SetElementRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/sets/contains": {
            "get": {
                "description": "Checks whether a given element exists within a set-type document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sets"
                ],
                "summary": "Check if element exists in set",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Element to check",
                        "name": "element",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status and whether the element exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Missing or invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/documents/sets/remove": {
            "post": {
                "description": "Removes a specific element from a set-type document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sets"
                ],
                "summary": "Remove element from set",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Column family (default: 'default')",
                        "name": "cf",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Expiration time in seconds (TTL \u003c= 30d or Unix timestamp)",
                        "name": "expiration",
                        "in": "query"
                    },
                    {
                        "description": "Element to remove from the set",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or missing parameters",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/families": {
            "get": {
                "description": "Retrieves the names of all available column families.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "families"
                ],
                "summary": "List column families",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new column family with the specified name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "families"
                ],
                "summary": "Create column family",
                "parameters": [
                    {
                        "description": "Name of the column family to create",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.createFamilyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created column family name",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing column family name",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Column family already exists",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Returns server-level and RocksDB-specific metrics, including memory usage, uptime, and database statistics.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Retrieve metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/metrics.FullMetrics"
                        }
                    },
                    "500": {
                        "description": "Failed to collect metrics",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "config.AppConfig": {
            "description": "Global server and database configuration.",
            "type": "object",
            "properties": {
                "read_defaults": {
                    "$ref": "#/definitions/config.ReadOptionsConfig"
                },
                "rocksdb": {
                    "$ref": "#/definitions/config.RocksDBConfig"
                },
                "server": {
                    "$ref": "#/definitions/config.ServerConfig"
                },
                "write_defaults": {
                    "$ref": "#/definitions/config.WriteOptionsConfig"
                }
            }
        },
        "config.ReadOptionsConfig": {
            "description": "Controls how data is read from the database.",
            "type": "object",
            "properties": {
                "fill_cache": {
                    "description": "Whether to fill cache on reads",
                    "type": "boolean"
                },
                "read_tier": {
                    "description": "Read level: all or cache-only",
                    "type": "string"
                }
            }
        },
        "config.RocksDBConfig": {
            "description": "Detailed configuration for the RocksDB storage backend.",
            "type": "object",
            "properties": {
                "block_cache_size": {
                    "description": "Size of the block cache in bytes",
                    "type": "integer"
                },
                "compression_type": {
                    "description": "Compression type: snappy, zstd, lz4, none",
                    "type": "string"
                },
                "create_if_missing": {
                    "description": "Whether to create the DB if it doesn't exist",
                    "type": "boolean"
                },
                "db_path": {
                    "description": "Path to the data directory",
                    "type": "string"
                },
                "enable_compression": {
                    "description": "Whether compression is enabled",
                    "type": "boolean"
                },
                "max_open_files": {
                    "description": "Maximum number of open files",
                    "type": "integer"
                },
                "max_write_buffer_num": {
                    "description": "Maximum number of write buffers",
                    "type": "integer"
                },
                "stats_dump_period": {
                    "description": "Frequency for dumping RocksDB statistics (e.g. \"30s\", \"1m\")",
                    "type": "string"
                },
                "write_buffer_size": {
                    "description": "Size of the write buffer in bytes",
                    "type": "integer"
                }
            }
        },
        "config.ServerConfig": {
            "description": "Listening port configuration for the REST API.",
            "type": "object",
            "properties": {
                "port": {
                    "description": "Port where the HTTP server listens",
                    "type": "integer"
                }
            }
        },
        "config.UpdateResult": {
            "description": "Outcome when applying changes to the configuration file.",
            "type": "object",
            "properties": {
                "applied": {
                    "description": "Parameters applied immediately",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rejected": {
                    "description": "Parameters rejected with reasons",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "requires_restart": {
                    "description": "Parameters that require a restart",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "config.WriteOptionsConfig": {
            "description": "Controls the write behavior in RocksDB.",
            "type": "object",
            "properties": {
                "disable_wal": {
                    "description": "Disable the Write-Ahead Log",
                    "type": "boolean"
                },
                "no_slowdown": {
                    "description": "Avoid blocking if RocksDB is busy",
                    "type": "boolean"
                },
                "sync": {
                    "description": "Wait for disk sync on write",
                    "type": "boolean"
                }
            }
        },
        "handlers.BulkPutRequestEntry": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Optional document type (e.g., \"json\", \"counter\", \"list\", \"set\").\nIf omitted, \"json\" is assumed.",
                    "type": "string"
                },
                "value": {
                    "description": "The value to store for the document.\nCan be a string, number, object, array, etc."
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "handlers.MultiGetResponse": {
            "description": "Map of keys to documents or null for missing entries.",
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/model.Document"
            }
        },
        "handlers.SetElementRequest": {
            "description": "Request body containing the element to operate with.",
            "type": "object",
            "properties": {
                "element": {}
            }
        },
        "handlers.createFamilyRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "logs"
                }
            }
        },
        "handlers.incrementRequest": {
            "type": "object",
            "properties": {
                "delta": {
                    "description": "The amount to increment (positive) or decrement (negative) the counter.",
                    "type": "integer"
                }
            }
        },
        "handlers.incrementResponse": {
            "type": "object",
            "properties": {
                "new": {
                    "description": "New value",
                    "type": "integer"
                },
                "old": {
                    "description": "Previous value",
                    "type": "integer"
                }
            }
        },
        "handlers.listElementRequest": {
            "type": "object",
            "properties": {
                "element": {
                    "description": "Element to add to the list (can be string, number, object, etc.)"
                }
            }
        },
        "handlers.multiGetRequest": {
            "type": "object",
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "metrics.DiskInfo": {
            "type": "object",
            "properties": {
                "free_bytes": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "total_bytes": {
                    "type": "integer"
                },
                "used_bytes": {
                    "type": "integer"
                }
            }
        },
        "metrics.FullMetrics": {
            "type": "object",
            "properties": {
                "rocksdb": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "server": {
                    "$ref": "#/definitions/metrics.ServerMetrics"
                }
            }
        },
        "metrics.ServerMetrics": {
            "type": "object",
            "properties": {
                "arch": {
                    "type": "string"
                },
                "db_disk": {
                    "$ref": "#/definitions/metrics.DiskInfo"
                },
                "go_version": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "mount_disk": {
                    "$ref": "#/definitions/metrics.DiskInfo"
                },
                "os": {
                    "type": "string"
                },
                "pid": {
                    "type": "integer"
                },
                "port": {
                    "type": "integer"
                },
                "uptime_seconds": {
                    "type": "integer"
                }
            }
        },
        "model.Document": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "Logical key",
                    "type": "string"
                },
                "meta": {
                    "description": "Metadata for versioning, expiration, etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Metadata"
                        }
                    ]
                },
                "value": {
                    "description": "Content: string, int, []string, map[string]any, etc."
                }
            }
        },
        "model.Metadata": {
            "type": "object",
            "properties": {
                "expiration": {
                    "description": "TTL as Unix timestamp (0 = never)",
                    "type": "integer"
                },
                "rev": {
                    "description": "Revision ID for conflict resolution",
                    "type": "string"
                },
                "type": {
                    "description": "Document type (json, counter, list, set)",
                    "type": "string"
                },
                "updated_at": {
                    "description": "When document was last updated",
                    "type": "string"
                }
            }
        }
    }
}